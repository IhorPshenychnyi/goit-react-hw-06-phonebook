{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","App.module.css","redux/contacts-actions.js","redux/contacts-reducer.js","redux/store.js","components/ContactForm/ContactForm.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","index.js","components/ContactForm/ContactForm.module.css"],"names":["module","exports","addContact","createAction","data","payload","id","shortid","generate","name","number","removeContact","changeFilter","items","createReducer","state","some","contact","toLowerCase","alert","filter","_","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","contacts","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","persistor","persistStore","connect","dispatch","onSubmit","useState","setName","setNumber","handleChange","e","currentTarget","value","reset","className","s","form","preventDefault","label","type","pattern","title","required","onChange","button","getVisibleContacts","allContacts","normalizedFilter","includes","handleClick","list","map","btn","onClick","target","input","App","container","console","log","getState","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.0ef3211b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ContactList_list__2zPe7\",\"btn\":\"ContactList_btn__3hlmd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"label\":\"Filter_label__11yzI\",\"input\":\"Filter_input__3WkDg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1574r\"};","import { createAction } from '@reduxjs/toolkit';\r\nimport shortid from 'shortid';\r\n// import { ADD, REMOVE, CHANGE_FILTER } from './action-types';\r\n\r\nconst addContact = createAction('contacts/add', data => ({\r\n  payload: {\r\n    id: shortid.generate(),\r\n    name: data.name,\r\n    number: data.number,\r\n  },\r\n}));\r\n\r\nconst removeContact = createAction('contacts/remove');\r\n\r\nconst changeFilter = createAction('contacts/changeFilter');\r\n\r\nexport { addContact, removeContact, changeFilter };\r\n\r\n// const addContact = data => ({\r\n//   type: ADD,\r\n//   payload: {\r\n//     id: shortid.generate(),\r\n//     name: data.name,\r\n//     number: data.number,\r\n//   },\r\n// });\r\n\r\n// const removeContact = contactId => ({\r\n//   type: REMOVE,\r\n//   payload: contactId,\r\n// });\r\n\r\n// const changeFilter = value => ({\r\n//   type: CHANGE_FILTER,\r\n//   payload: value,\r\n// });\r\n","import { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport { addContact, removeContact, changeFilter } from './contacts-actions';\r\n// import { ADD, REMOVE, CHANGE_FILTER } from './action-types';\r\n\r\nconst items = createReducer([], {\r\n  [addContact]: (state, { payload }) => {\r\n    const existContact = state.some(\r\n      contact => contact.name.toLowerCase() === payload.name.toLowerCase(),\r\n    );\r\n\r\n    if (existContact) {\r\n      alert(`${payload.name} is already in contacts.`);\r\n      return [...state];\r\n    }\r\n    return [...state, payload];\r\n  },\r\n  [removeContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n\r\n// const items = (state = [], { type, payload }) => {\r\n//   switch (type) {\r\n//     case ADD:\r\n//       const existContact = state.some(\r\n//         contact => contact.name.toLowerCase() === payload.name.toLowerCase(),\r\n//       );\r\n\r\n//       if (existContact) {\r\n//         alert(`${payload.name} is already in contacts.`);\r\n//         return [...state];\r\n//       }\r\n//       return [...state, payload];\r\n\r\n//     case REMOVE:\r\n//       return state.filter(({ id }) => id !== payload);\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n\r\n// const filter = (state = '', { type, payload }) => {\r\n//   switch (type) {\r\n//     case CHANGE_FILTER:\r\n//       return payload;\r\n\r\n//     default:\r\n//       return state;\r\n//   }\r\n// };\r\n","// import { combineReducers } from 'redux';\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\nimport storage from 'redux-persist/lib/storage';\r\n// import { composeWithDevTools } from 'redux-devtools-extension';\r\nimport logger from 'redux-logger';\r\n\r\nimport contactsReducer from './contacts-reducer';\r\n\r\nconst contactsPersistConfig = {\r\n  key: 'contacts',\r\n  storage,\r\n  blacklist: ['filter'],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\r\n  },\r\n  middleware: getDefaultMiddleware =>\r\n    getDefaultMiddleware({\r\n      serializableCheck: {\r\n        ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n      },\r\n    }).concat(logger),\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport { store, persistor };\r\n\r\n// const middleware = [...getDefaultMiddleware(), logger];\r\n\r\n// const store = createStore(rootReducer, composeWithDevTools());\r\n","import { useState } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { addContact } from '../../redux/contacts-actions';\n\nimport s from './ContactForm.module.css';\n\nfunction ContactForm({ onSubmit }) {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    if (name === 'name') {\n      setName(value);\n    } else if (name === 'number') {\n      setNumber(value);\n    }\n  };\n\n  const onFormSubmit = e => {\n    e.preventDefault();\n    onSubmit({ name, number });\n    reset();\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  return (\n    <form className={s.form} onSubmit={onFormSubmit}>\n      <label className={s.label}>\n        Name\n        <input\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </label>\n\n      <label className={s.label}>\n        Number\n        <input\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n          value={number}\n          onChange={handleChange}\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nContactForm.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onSubmit: data => dispatch(addContact(data)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { removeContact } from '../../redux/contacts-actions';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ contacts, handleClick }) => (\n  <ul className={s.list}>\n    {contacts.map(({ id, name, number }) => (\n      <li key={id}>\n        <span>\n          {name}: {number}\n        </span>\n        <button className={s.btn} type=\"button\" onClick={() => handleClick(id)}>\n          Delete\n        </button>\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(PropTypes.objectOf(PropTypes.string.isRequired)),\n  handleClick: PropTypes.func.isRequired,\n};\n\nconst getVisibleContacts = (allContacts, filter) => {\n  const normalizedFilter = filter.toLowerCase();\n\n  return allContacts.filter(contact =>\n    contact.name.toLowerCase().includes(normalizedFilter),\n  );\n};\n\nconst mapStateToProps = ({ contacts: { items, filter } }) => ({\n  contacts: getVisibleContacts(items, filter),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  handleClick: id => dispatch(removeContact(id)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n","import PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { changeFilter } from '../../redux/contacts-actions';\nimport s from './Filter.module.css';\n\nconst Filter = ({ value, onChange }) => (\n  <label className={s.label}>\n    Find contacts by name\n    <input\n      className={s.input}\n      type=\"text\"\n      name=\"name\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      required\n      value={value}\n      onChange={onChange}\n    />\n  </label>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import ContactForm from './components/ContactForm/ContactForm';\nimport ContactList from './components/ContactList/ContactList';\nimport Filter from './components/Filter/Filter';\n\nimport s from './App.module.css';\n\nfunction App() {\n  return (\n    <div className={s.container}>\n      <h1>Phonebook</h1>\n      <ContactForm />\n\n      <h2>Contacts</h2>\n      <Filter />\n\n      <ContactList />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport './index.css';\nimport 'modern-normalize/modern-normalize.css';\nimport App from './App';\n\nconsole.log(store.getState());\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__1izFR\",\"label\":\"ContactForm_label__lY5zL\",\"button\":\"ContactForm_button__3CvPs\"};"],"sourceRoot":""}